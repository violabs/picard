package io.violabs.picard.v2.resources.service.endpointslice

import io.violabs.konstellation.metaDsl.annotation.GeneratedDsl
import io.violabs.picard.v2.common.ObjectReference

/**
 * Endpoint represents a single logical "backend" implementing a service.
 */
@GeneratedDsl(withListGroup = true)
data class Endpoint(
    /**
     * addresses of this endpoint. For EndpointSlices of addressType "IPv4" or "IPv6", the values 
     * are IP addresses in canonical form. The syntax and semantics of other addressType values are 
     * not defined. This must contain at least one address but no more than 100. EndpointSlices 
     * generated by the EndpointSlice controller will always have exactly 1 address. No semantics 
     * are defined for additional addresses beyond the first, and kube-proxy does not look at them.
     */
    val addresses: List<String>,
    /**
     * conditions contains information about the current status of the endpoint.
     */
    val conditions: EndpointConditions? = null,
    /**
     * hints contains information associated with how an endpoint should be consumed.
     */
    val hints: EndpointHints? = null,
    /**
     * hostname of this endpoint. This field may be used by consumers of endpoints to distinguish 
     * endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname 
     * should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass 
     * DNS Label (RFC 1123) validation.
     */
    val hostname: String? = null,
    /**
     * nodeName represents the name of the Node hosting this endpoint. This can be used to determine 
     * endpoints local to a Node.
     */
    val nodeName: String? = null,
    /**
     * targetRef is a reference to a Kubernetes object that represents this endpoint.
     */
    val targetRef: ObjectReference? = null,
    /**
     * zone is the name of the Zone this endpoint exists in.
     */
    val zone: String? = null
)